// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2025 15:07:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoderBCD7segments
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoderBCD7segments_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in_A;
reg in_B;
reg in_C;
reg in_D;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;

// assign statements (if any)                          
decoderBCD7segments i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.in_A(in_A),
	.in_B(in_B),
	.in_C(in_C),
	.in_D(in_D)
);
initial 
begin 
#1000000 $finish;
end 

// in_A
initial
begin
	repeat(6)
	begin
		in_A = 1'b0;
		in_A = #80000 1'b1;
		# 80000;
	end
	in_A = 1'b0;
end 

// in_B
initial
begin
	repeat(12)
	begin
		in_B = 1'b0;
		in_B = #40000 1'b1;
		# 40000;
	end
	in_B = 1'b0;
end 

// in_C
always
begin
	in_C = 1'b0;
	in_C = #20000 1'b1;
	#20000;
end 

// in_D
always
begin
	in_D = 1'b0;
	in_D = #10000 1'b1;
	#10000;
end 
endmodule

