// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2025 13:16:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoderBCD7segments
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoderBCD7segments_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;

// assign statements (if any)                          
decoderBCD7segments i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g)
);
initial 
begin 
#1000000 $finish;
end 

// A0
initial
begin
	repeat(6)
	begin
		A0 = 1'b0;
		A0 = #80000 1'b1;
		# 80000;
	end
	A0 = 1'b0;
end 

// A1
initial
begin
	repeat(12)
	begin
		A1 = 1'b0;
		A1 = #40000 1'b1;
		# 40000;
	end
	A1 = 1'b0;
end 

// A2
always
begin
	A2 = 1'b0;
	A2 = #20000 1'b1;
	#20000;
end 

// A3
always
begin
	A3 = 1'b0;
	A3 = #10000 1'b1;
	#10000;
end 
endmodule

